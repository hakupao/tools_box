---
description: 
globs: *.py
alwaysApply: false
---
# Python Project Rules (.mdc)

## 1. Code Style

- Follow the [PEP8](mdc:https:/pep8.org) style guide.
- Use 4 spaces for indentation, tabs are not allowed.
- Maximum line length: 100 characters (recommended: within 88 characters for compatibility with black).
- Always include a newline at the end of each file.
- Add docstrings for all functions, classes, and modules, following [PEP257](mdc:https:/peps.python.org/pep-0257).
- Use `isort` to automatically sort import statements.

## 2. Formatting and Linting

- Use `black` as the code formatter.
- Use `flake8` for static code analysis; additional rules can be specified in the `.flake8` file.
- All code must pass formatting and lint checks before committing.

## 3. Dependency Management

- Manage dependencies using `requirements.txt` or `pyproject.toml`.
- Do not install global dependencies arbitrarily.
- It is recommended to use a virtual environment such as `venv` or `conda`.

## 4. Project Structure

- Source code should be placed in the `src/` folder or a package-named directory at the root.
- Test code must be stored in the `tests/` directory.
- Configuration files should be placed in a `config/` directory.

## 5. Commit Standards

- Follow the [Conventional Commits](mdc:https:/www.conventionalcommits.org) format for Git commit messages.
- All tests must pass before pushing commits.
- Do not commit large data files or any sensitive information (e.g., API keys).

## 6. Testing and Documentation

- Every new feature or bug fix must be accompanied by appropriate unit tests.
- Use `pytest` for testing.
- Important classes and methods must have clear documentation. It is recommended to use Sphinx to generate project documentation.

## 7. Security Guidelines

- Never commit plaintext passwords, API keys, tokens, or other sensitive information to the repository.
- Use `.env` files and tools like `python-dotenv` to manage environment variables when necessary.

